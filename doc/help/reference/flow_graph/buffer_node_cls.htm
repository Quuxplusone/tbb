
<!DOCTYPE html
  PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!-- saved from url=(0014)about:internet -->
<html xmlns:MSHelp="http://www.microsoft.com/MSHelp/" lang="en-us" xml:lang="en-us"><head>
      <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
   
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="DC.Type" content="reference">
<meta name="DC.Title" content="buffer_node Class">
<meta name="DC.subject" content="buffer_node Class">
<meta name="keywords" content="buffer_node Class">
<meta name="DC.Relation" scheme="URI" content="../../reference/flow_graph.htm">
<meta name="DC.Relation" scheme="URI" content="message_passing_protocol.htm">
<meta name="DC.Format" content="XHTML">
<meta name="DC.Identifier" content="buffer_node_cls">
<meta name="DC.Language" content="en-US">
<link rel="stylesheet" type="text/css" href="../../intel_css_styles.css">
<title>buffer_node Class</title>
</head>
<body id="buffer_node_cls">
 <!-- ==============(Start:NavScript)================= -->
 <script src="../../NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
 <script language="JavaScript1.2" type="text/javascript">WriteNavLink(2);</script>
 <!-- ==============(End:NavScript)================= -->
<a name="buffer_node_cls"><!-- --></a>

 
  <h1 class="topictitle1">buffer_node Class</h1>
 
   
  <div> 
	 <div class="section"><h2 class="sectiontitle">Summary</h2> 
		 
		<p>An unbounded buffer of messages of type 
		  <span class="keyword">T</span>. Messages are forwarded in arbitrary order. 
		</p>
 
	 </div>
 
	 <div class="section"><h2 class="sectiontitle">Syntax</h2> 
		 
		<pre>template&lt; typename T, typename A = cache_aligned_allocator&lt;T&gt; &gt;
class buffer_node;</pre> 
	 </div>
 
	 <div class="section"><h2 class="sectiontitle">Header</h2> 
		 
		<pre>#include "tbb/flow_graph.h"</pre> 
	 </div>
 
	 <div class="section"><h2 class="sectiontitle">Description</h2> 
		 
		<p>A 
		  <span class="keyword">buffer_node</span> is a 
		  <span class="keyword">graph_node</span>, 
		  <span class="keyword">receiver&lt;T&gt;</span> and 
		  <span class="keyword">sender&lt;T&gt;</span> that forwards messages in arbitrary
		  order to a single successor in its successor set. Successors are tried in the
		  order that they were registered with the node. If a successor rejects the
		  message, it is removed from the successor list according to the policy in the
		  Message Passing Protocol, and the next successor in the set is tried. This
		  continues until a successor accepts the message, or all successors have been
		  attempted. Items that are successfully transferred to a successor are removed
		  from the buffer. 
		</p>
 
		<p>A 
		  <span class="keyword">buffer_node</span> is reservable and supports a single
		  reservation at a time. While an item is reserved, other items may still be
		  forwarded to successors and 
		  <span class="keyword">try_get</span> calls will return other non-reserved items
		  if available. While an item is reserved, 
		  <span class="keyword">try_put</span> will still return 
		  <span class="keyword">true</span> and add items to the buffer. 
		</p>
 
		<p>An allocator of type 
		  <span class="keyword">A</span> is used to allocate internal memory for the 
		  <span class="keyword">buffer_node.</span> 
		</p>
 
		<p><span class="keyword">T</span> must be copy-constructible and assignable 
		</p>
 
		<p>Rejection of messages by successors is handled using the protocol in
		  the Message Passing Protocol, see link below. 
		</p>
 
	 </div>
 
	 <div class="section"><h2 class="sectiontitle">Members</h2> 
		 
		<pre>namespace tbb {
namespace flow {
 
 
template&lt; typename T, typename A = cache_aligned_allocator&lt;T&gt; &gt;
class buffer_node :
  public graph_node, public receiver&lt;T&gt;, public sender&lt;T&gt; {
public:
    buffer_node( graph &amp;g );
    buffer_node( const buffer_node &amp;src );
 
    // receiver&lt;T&gt;
    typedef T input_type;
    typedef sender&lt;input_type&gt; predecessor_type;
    bool try_put( const input_type &amp;v );
    bool register_predecessor( predecessor_type &amp;p );
    bool remove_predecessor( predecessor_type &amp;p );
 
    // sender&lt;T&gt;
    typedef T output_type;
    typedef receiver&lt;output_type&gt; successor_type;
    bool register_successor( successor_type &amp;r );
    bool remove_successor( successor_type &amp;r );
    bool try_get( output_type &amp;v );
    bool try_reserve( output_type &amp;v );
    bool try_release( );
    bool try_consume( );
};
 
}
}</pre> 
		
<div class="tablenoborder"><table cellpadding="4" summary="" frame="border" border="1" cellspacing="0" rules="all"><span class="tabledesc">The following table provides additional information on the
			 members of this class. 
		  </span><thead align="left"> 
				<tr> 
				  <th class="cellrowborder" valign="top" width="33.89830508474576%" id="d4138e184">Member 
				  </th>
 
				  <th class="cellrowborder" valign="top" width="66.10169491525423%" id="d4138e187">Description 
				  </th>
 
				</tr>
</thead>
 
			 <tbody> 
				<tr> 
				  <td class="cellrowborder" valign="top" width="33.89830508474576%" headers="d4138e184 "><span class="keyword">buffer_node( graph &amp;g
						)</span> 
				  </td>
 
				  <td class="cellrowborder" valign="top" width="66.10169491525423%" headers="d4138e187 "> 
					 <p>Constructs an empty 
						<span class="keyword">buffer_node</span> that belongs to the 
						<span class="keyword">graph g</span>. 
					 </p>
 
				  </td>
 
				</tr>
 
				<tr> 
				  <td class="cellrowborder" valign="top" width="33.89830508474576%" headers="d4138e184 "><span class="keyword">buffer_node( const buffer_node
						&amp;src )</span> 
				  </td>
 
				  <td class="cellrowborder" valign="top" width="66.10169491525423%" headers="d4138e187 "> 
					 <p>Constructs an empty 
						<span class="keyword">buffer_node</span>. The buffered value and list
						of successors is NOT copied from 
						<span class="keyword">src</span>. 
					 </p>
 
				  </td>
 
				</tr>
 
				<tr> 
				  <td class="cellrowborder" valign="top" width="33.89830508474576%" headers="d4138e184 "><span class="keyword">bool try_put( const input_type
						&amp;v )</span> 
				  </td>
 
				  <td class="cellrowborder" valign="top" width="66.10169491525423%" headers="d4138e187 "> 
					 <p>Adds 
						<span class="keyword">v</span> to the buffer. If 
						<span class="keyword">v</span> is the only item in the buffer, a task
						is also enqueued to forward the item to a successor. 
					 </p>
 
					 <p><strong>Returns</strong>: 
						<span class="keyword">true</span> 
					 </p>
 
				  </td>
 
				</tr>
 
				<tr> 
				  <td class="cellrowborder" valign="top" width="33.89830508474576%" headers="d4138e184 "><span class="keyword">bool register_predecessor(
						predecessor_type &amp;p )</span> 
				  </td>
 
				  <td class="cellrowborder" valign="top" width="66.10169491525423%" headers="d4138e187 "> 
					 <p>Never rejects puts and therefore does not need to maintain a
						list of predecessors. 
					 </p>
 
					 <p><strong>Returns</strong>: 
						<span class="keyword">false</span> 
					 </p>
 
				  </td>
 
				</tr>
 
				<tr> 
				  <td class="cellrowborder" valign="top" width="33.89830508474576%" headers="d4138e184 "><span class="keyword">bool remove_predecessor(
						predecessor_type &amp;p )</span> 
				  </td>
 
				  <td class="cellrowborder" valign="top" width="66.10169491525423%" headers="d4138e187 "> 
					 <p>Never rejects puts and therefore does not need to maintain a
						list of predecessors. 
					 </p>
 
					 <p><strong>Returns</strong>: 
						<span class="keyword">false</span> 
					 </p>
 
				  </td>
 
				</tr>
 
				<tr> 
				  <td class="cellrowborder" valign="top" width="33.89830508474576%" headers="d4138e184 "><span class="keyword">bool register_successor(
						successor_type &amp;r )</span> 
				  </td>
 
				  <td class="cellrowborder" valign="top" width="66.10169491525423%" headers="d4138e187 "> 
					 <p>Adds 
						<span class="keyword">r</span> to the set of successors. 
					 </p>
 
					 <p><strong>Returns</strong>: 
						<span class="keyword">true</span> 
					 </p>
 
				  </td>
 
				</tr>
 
				<tr> 
				  <td class="cellrowborder" valign="top" width="33.89830508474576%" headers="d4138e184 "><span class="keyword">bool remove_successor(
						successor_type &amp;r )</span> 
				  </td>
 
				  <td class="cellrowborder" valign="top" width="66.10169491525423%" headers="d4138e187 "> 
					 <p>Removes 
						<span class="keyword">r</span> from the set of successors. 
					 </p>
 
					 <p><strong>Returns</strong>: 
						<span class="keyword">true</span> 
					 </p>
 
				  </td>
 
				</tr>
 
				<tr> 
				  <td class="cellrowborder" valign="top" width="33.89830508474576%" headers="d4138e184 "><span class="keyword">bool try_get( output_type &amp;v
						)</span> 
				  </td>
 
				  <td class="cellrowborder" valign="top" width="66.10169491525423%" headers="d4138e187 "> 
					 <p><strong>Returns</strong>: 
						<span class="keyword">true</span> if an item can be removed from the
						buffer and assigned to 
						<span class="keyword">v</span>. Returns 
						<span class="keyword">false</span> if there is no non-reserved item
						currently in the buffer. 
					 </p>
 
				  </td>
 
				</tr>
 
				<tr> 
				  <td class="cellrowborder" valign="top" width="33.89830508474576%" headers="d4138e184 "><span class="keyword">bool try_reserve( output_type
						&amp;v )</span> 
				  </td>
 
				  <td class="cellrowborder" valign="top" width="66.10169491525423%" headers="d4138e187 "> 
					 <p>Assigns a newly reserved item to 
						<span class="keyword">v</span> if there is no reservation currently
						held and there is at least one item available in the buffer. If a new
						reservation is made, the buffer is marked as reserved. 
					 </p>
 
					 <p><strong>Returns</strong>: 
						<span class="keyword">true</span> if 
						<span class="keyword">v</span> has been assigned a newly reserved item.
						Returns 
						<span class="keyword">false</span> otherwise. 
					 </p>
 
				  </td>
 
				</tr>
 
				<tr> 
				  <td class="cellrowborder" valign="top" width="33.89830508474576%" headers="d4138e184 "><span class="keyword">bool try_release( )</span> 
				  </td>
 
				  <td class="cellrowborder" valign="top" width="66.10169491525423%" headers="d4138e187 "> 
					 <p>Releases the reservation on the buffer. The item that was
						returned in the last successful call to 
						<span class="keyword">try_reserve</span> remains in the buffer. 
					 </p>
 
					 <p><strong>Returns</strong>: 
						<span class="keyword">true</span> if the buffer is currently reserved
						and 
						<span class="keyword">false</span> otherwise. 
					 </p>
 
				  </td>
 
				</tr>
 
				<tr> 
				  <td class="cellrowborder" valign="top" width="33.89830508474576%" headers="d4138e184 "><span class="keyword">bool try_consume( )</span> 
				  </td>
 
				  <td class="cellrowborder" valign="top" width="66.10169491525423%" headers="d4138e187 "> 
					 <p>Releases the reservation on the buffer. The item that was
						returned in the last successful call to 
						<span class="keyword">try_reserve</span> remains in the buffer. 
					 </p>
 
					 <p><strong>Returns</strong>: 
						<span class="keyword">true</span> if the buffer is currently reserved
						and 
						<span class="keyword">false</span> otherwise. 
					 </p>
 
				  </td>
 
				</tr>
 
			 </tbody>
 
		  </table>
</div>
 
	 </div>
 
  </div>
 
  
<div class="familylinks">
<div class="parentlink"><strong>Parent topic:</strong> <a href="../../reference/flow_graph.htm">Flow Graph</a></div>
</div>
<div class="See Also">
<h2>See Also</h2>
<div class="linklist">
<div><a href="message_passing_protocol.htm">Message Passing Protocol 
		  </a></div></div>
</div>

</body>
</html>
