<!DOCTYPE html
  PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!-- saved from url=(0014)about:internet -->
<html xmlns:MSHelp="http://www.microsoft.com/MSHelp/" lang="en-us" xml:lang="en-us"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">

<meta name="DC.Type" content="reference">
<meta name="DC.Title" content="Construct, Destroy, Copy">
<meta name="DC.subject" content="Construct, Destroy, Copy">
<meta name="keywords" content="Construct, Destroy, Copy">
<meta name="DC.Relation" scheme="URI" content="../../../reference/containers_overview/concurrent_unordered_map_cls.htm">
<meta name="DC.Format" content="XHTML">
<meta name="DC.Identifier" content="construct_destroy_copy_map_cls">
<meta name="DC.Language" content="en-US">
<link rel="stylesheet" type="text/css" href="../../../intel_css_styles.css">
<title>Construct, Destroy, Copy</title>
</head>
<body id="construct_destroy_copy_map_cls">
 <!-- ==============(Start:NavScript)================= -->
 <script src="..\..\..\NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
 <script language="JavaScript1.2" type="text/javascript">WriteNavLink(3);</script>
 <!-- ==============(End:NavScript)================= -->
<a name="construct_destroy_copy_map_cls"><!-- --></a>

 
  <h1 class="topictitle1">Construct, Destroy, Copy</h1>
 
   
  <div> 
  <div class="section">
		The following tables provide information on the members of the <samp class="codeph">concurrent_unordered_map</samp>
                and <samp class="codeph">concurrent_unordered_multimap</samp> template classes. 
  </div>

  <div class="section"><h2 class="sectiontitle"> <samp class="codeph">concurrent_unordered_map</samp> </h2>
	 
<div class="tablenoborder"><table cellpadding="4" summary="" frame="border" border="1" cellspacing="0" rules="all"><thead align="left"> 
			 <tr> 
				<th class="cellrowborder" valign="top" width="50.632911392405056%" id="d43089e42">Member 
				</th>
 
				<th class="cellrowborder" valign="top" width="49.36708860759494%" id="d43089e45">Description 
				</th>
 
			 </tr>
</thead>
 
		  <tbody> 
			 <tr> 
				<td class="cellrowborder" valign="top" width="50.632911392405056%" headers="d43089e42 "><samp class="codeph">explicit concurrent_unordered_map
					 (size_type n = <em>&lt;implementation-defined&gt;</em>, const hasher&amp; hf = hasher(),const
					 key_equal&amp; eql = key_equal(), const allocator_type&amp; a =
					 allocator_type())</samp> 
				</td>
 
				<td class="cellrowborder" valign="top" width="49.36708860759494%" headers="d43089e45 "> 
				  <p>Construct table with 
					 <samp class="codeph">n</samp> buckets. 
				  </p>
 
				</td>
 
			 </tr>
 
			 <tr> 
				<td class="cellrowborder" valign="top" width="50.632911392405056%" headers="d43089e42 "><samp class="codeph">template &lt;typename
					 InputIterator&gt; concurrent_unordered_map (InputIterator first, InputIterator
					 last, size_type n = <em>&lt;implementation-defined&gt;</em>, const hasher&amp; hf =
					 hasher(), const key_equal&amp; eql = key_equal(), const allocator_type&amp; a =
					 allocator_type())</samp> 
				</td>
 
				<td class="cellrowborder" valign="top" width="49.36708860759494%" headers="d43089e45 "> 
				  <p>Construct table with 
					 <samp class="codeph">n</samp> buckets initialized with 
					 <samp class="codeph">value_type(*<em>i</em>)</samp> where 
					 <samp class="codeph"><em>i</em></samp> is in the half open interval
					 <samp class="codeph">[first,last)</samp>. 
				  </p>
 
				</td>
 
			 </tr>
 
			 <tr> 
				<td class="cellrowborder" valign="top" width="50.632911392405056%" headers="d43089e42 "><samp class="codeph">concurrent_unordered_map(const
					 concurrent_unordered_map&amp; m)</samp> 
				</td>
 
				<td class="cellrowborder" valign="top" width="49.36708860759494%" headers="d43089e45 "> 
				  <p>Construct copy of concurrent_unordered_map 
					 <samp class="codeph">m</samp>. 
				  </p>
 
				</td>
 
			 </tr>
 
			 <tr> 
				<td class="cellrowborder" valign="top" width="50.632911392405056%" headers="d43089e42 "><samp class="codeph">concurrent_unordered_map(const
					 Alloc&amp; a)</samp> 
				</td>
 
				<td class="cellrowborder" valign="top" width="49.36708860759494%" headers="d43089e45 "> 
				  <p>Construct empty concurrent_unordered_map using allocator 
					 <samp class="codeph">a</samp>. 
				  </p>
 
				</td>
 
			 </tr>
 
			 <tr> 
				<td class="cellrowborder" valign="top" width="50.632911392405056%" headers="d43089e42 "><samp class="codeph">concurrent_unordered_map(const
					 concurrent_unordered_map&amp;, const Alloc&amp; a)</samp> 
				</td>
 
				<td class="cellrowborder" valign="top" width="49.36708860759494%" headers="d43089e45 "> 
				  <p>Construct copy of concurrent_unordered_map 
					 <samp class="codeph">m</samp> using allocator 
					 <samp class="codeph">a</samp>. 
				  </p>
 
				</td>
 
			 </tr>

             <tr> 
                <td class="cellrowborder" valign="top" width="50.632911392405056%" headers="d43089e42 "><samp class="codeph">concurrent_unordered_map(
                    const std::initializer_list&lt;value_type&gt; &amp;il, 
                    size_type n = <em>implementation-defined</em>,
                    const Hasher&amp; hf = hasher(),
                    const key_equal&amp; eql = key_equal(),
                    const allocator_type&amp; a = allocator_type())</samp> 
                </td>
 
                <td class="cellrowborder" valign="top" width="49.36708860759494%" headers="d43089e45 "> 
                  <p>C++11 specific; Equivalent to 
                        <samp class="codeph">concurrent_unordered_map(<em>il</em>.begin(), 
                          <em>il</em>.end(), 
                          <em>a</em>)</samp>. 
                  </p>
 
                </td>
 
             </tr>
 
			 <tr> 
				<td class="cellrowborder" valign="top" width="50.632911392405056%" headers="d43089e42 "><samp class="codeph">~concurrent_unordered_map()</samp> 
				</td>
 
				<td class="cellrowborder" valign="top" width="49.36708860759494%" headers="d43089e45 "> 
				  <p>Destroy the concurrent_unordered_map. 
				  </p>
 
				</td>
 
			 </tr>
 
			 <tr> 
				<td class="cellrowborder" valign="top" width="50.632911392405056%" headers="d43089e42 "><samp class="codeph">concurrent_unordered_map&amp;
					 operator=(const concurrent_unordered_map&amp; m);</samp> 
				</td>
 
				<td class="cellrowborder" valign="top" width="49.36708860759494%" headers="d43089e45 "> 
				  <p>Set 
					 <samp class="codeph">*this</samp> to a copy of concurrent_unordered_map 
					 <samp class="codeph">m</samp>. 
				  </p>
 
				</td>
 
			 </tr>

             <tr> 
                <td class="cellrowborder" valign="top" width="50.632911392405056%" headers="d43089e42 "><samp class="codeph">concurrent_unordered_map&amp;
                     operator=(const std::initializer_list&lt;value_type&gt; &amp;il);</samp> 
                </td>
 
                <td class="cellrowborder" valign="top" width="49.36708860759494%" headers="d43089e45 "> 
                  <p>C++11 specific; Sets 
                        <samp class="codeph">*<em>this</em></samp> 
                        to contain data from
                        <samp class="codeph">il</samp>.
                  </p>
 
                </td>
 
             </tr>
 
			 <tr> 
				<td class="cellrowborder" valign="top" width="50.632911392405056%" headers="d43089e42 "><samp class="codeph">allocator_type get_allocator()
					 const; 
				  </samp>
				</td>
 
				<td class="cellrowborder" valign="top" width="49.36708860759494%" headers="d43089e45 "> 
				  <p>Get copy of the allocator associated with 
					 <samp class="codeph">*this</samp>. 
				  </p>
 
				</td>
 
			 </tr>
 
		  </tbody>
 
		</table>
</div>
 
         </div>

      <div class="section"><h2 class="sectiontitle"> <samp class="codeph">concurrent_unordered_multimap</samp> </h2>
	 
<div class="tablenoborder"><table cellpadding="4" summary="" frame="border" border="1" cellspacing="0" rules="all"><thead align="left"> 
			 <tr> 
				<th class="cellrowborder" valign="top" width="50.632911392405056%" id="d43089e281">Member 
				</th>
 
				<th class="cellrowborder" valign="top" width="49.36708860759494%" id="d43089e284">Description 
				</th>
 
			 </tr>
</thead>
 
		  <tbody> 
			 <tr> 
				<td class="cellrowborder" valign="top" width="50.632911392405056%" headers="d43089e281 "><samp class="codeph">explicit concurrent_unordered_multimap
					 (size_type n = <em>&lt;implementation-defined&gt;</em>, const hasher&amp; hf = hasher(),const
					 key_equal&amp; eql = key_equal(), const allocator_type&amp; a =
					 allocator_type())</samp> 
				</td>
 
				<td class="cellrowborder" valign="top" width="49.36708860759494%" headers="d43089e284 "> 
				  <p>Construct table with 
					 <samp class="codeph">n</samp> buckets. 
				  </p>
 
				</td>
 
			 </tr>
 
			 <tr> 
				<td class="cellrowborder" valign="top" width="50.632911392405056%" headers="d43089e281 "><samp class="codeph">template &lt;typename
					 InputIterator&gt; concurrent_unordered_multimap (InputIterator first, InputIterator
					 last, size_type n = <em>&lt;implementation-defined&gt;</em>, const hasher&amp; hf =
					 hasher(), const key_equal&amp; eql = key_equal(), const allocator_type&amp; a =
					 allocator_type())</samp> 
				</td>
 
				<td class="cellrowborder" valign="top" width="49.36708860759494%" headers="d43089e284 "> 
				  <p>Construct table with 
					 <samp class="codeph">n</samp> buckets initialized with 
					 <samp class="codeph">value_type(*<em>i</em>)</samp> where 
					 <samp class="codeph"><em>i</em></samp> is in the half open interval
					 <samp class="codeph">[first,last)</samp>. 
				  </p>
 
				</td>
 
			 </tr>
 
			 <tr> 
				<td class="cellrowborder" valign="top" width="50.632911392405056%" headers="d43089e281 "><samp class="codeph">concurrent_unordered_multimap(const
					 concurrent_unordered_multimap&amp; m)</samp> 
				</td>
 
				<td class="cellrowborder" valign="top" width="49.36708860759494%" headers="d43089e284 "> 
				  <p>Construct copy of concurrent_unordered_multimap 
					 <samp class="codeph">m</samp>. 
				  </p>
 
				</td>
 
			 </tr>
 
			 <tr> 
				<td class="cellrowborder" valign="top" width="50.632911392405056%" headers="d43089e281 "><samp class="codeph">concurrent_unordered_multimap(const
					 Alloc&amp; a)</samp> 
				</td>
 
				<td class="cellrowborder" valign="top" width="49.36708860759494%" headers="d43089e284 "> 
				  <p>Construct empty concurrent_unordered_multimap using allocator 
					 <samp class="codeph">a</samp>. 
				  </p>
 
				</td>
 
			 </tr>
 
			 <tr> 
				<td class="cellrowborder" valign="top" width="50.632911392405056%" headers="d43089e281 "><samp class="codeph">concurrent_unordered_multimap(const
					 concurrent_unordered_multimap&amp;, const Alloc&amp; a)</samp> 
				</td>
 
				<td class="cellrowborder" valign="top" width="49.36708860759494%" headers="d43089e284 "> 
				  <p>Construct copy of concurrent_unordered_multimap 
					 <samp class="codeph">m</samp> using allocator 
					 <samp class="codeph">a</samp>. 
				  </p>
 
				</td>
 
			 </tr>
 
             <tr> 
                <td class="cellrowborder" valign="top" width="50.632911392405056%" headers="d43089e281 "><samp class="codeph">concurrent_unordered_multimap(
                    const std::initializer_list&lt;value_type&gt; &amp;il, 
                    size_type n = <em>implementation-defined</em>,
                    const Hasher&amp; hf = hasher(),
                    const key_equal&amp; eql = key_equal(),
                    const allocator_type&amp; a = allocator_type())</samp> 
                </td>
 
                <td class="cellrowborder" valign="top" width="49.36708860759494%" headers="d43089e284 "> 
                  <p>C++11 specific; Equivalent to 
                        <samp class="codeph">concurrent_unordered_multimap(<em>il</em>.begin(), 
                          <em>il</em>.end(), 
                          <em>a</em>)</samp>. 
                  </p>
 
                </td>
 
             </tr>
 
			 <tr> 
				<td class="cellrowborder" valign="top" width="50.632911392405056%" headers="d43089e281 "><samp class="codeph">~concurrent_unordered_multimap()</samp> 
				</td>
 
				<td class="cellrowborder" valign="top" width="49.36708860759494%" headers="d43089e284 "> 
				  <p>Destroy the concurrent_unordered_multimap. 
				  </p>
 
				</td>
 
			 </tr>
 
			 <tr> 
				<td class="cellrowborder" valign="top" width="50.632911392405056%" headers="d43089e281 "><samp class="codeph">concurrent_unordered_multimap&amp;
					 operator=(const concurrent_unordered_multimap&amp; m);</samp> 
				</td>
 
				<td class="cellrowborder" valign="top" width="49.36708860759494%" headers="d43089e284 "> 
				  <p>Set 
					 <samp class="codeph">*this</samp> to a copy of concurrent_unordered_multimap 
					 <samp class="codeph">m</samp>. 
				  </p>
 
				</td>
 
			 </tr>
 
             <tr> 
                <td class="cellrowborder" valign="top" width="50.632911392405056%" headers="d43089e281 "><samp class="codeph">concurrent_unordered_multimap&amp;
                     operator=(const std::initializer_list&lt;value_type&gt; &amp;il);</samp> 
                </td>
 
                <td class="cellrowborder" valign="top" width="49.36708860759494%" headers="d43089e284 "> 
                  <p>C++11 specific; Sets 
                        <samp class="codeph">*<em>this</em></samp> 
                        to contain data from
                        <samp class="codeph">il</samp>. 
                  </p>
 
                </td>
 
             </tr>
 			 
			 <tr> 
				<td class="cellrowborder" valign="top" width="50.632911392405056%" headers="d43089e281 "><samp class="codeph">allocator_type get_allocator()
					 const; 
				  </samp>
				</td>
 
				<td class="cellrowborder" valign="top" width="49.36708860759494%" headers="d43089e284 "> 
				  <p>Get copy of the allocator associated with 
					 <samp class="codeph">*this</samp>. 
				  </p>
 
				</td>
 
			 </tr>
 
		  </tbody>
 
		</table>
</div>
 
         </div>

  </div>
 

<div class="familylinks">
<div class="parentlink"><strong>Parent topic:</strong>&nbsp;<a href="../../../reference/containers_overview/concurrent_unordered_map_cls.htm">concurrent_unordered_map and concurrent_unordered_multimap Template Classes</a></div>
</div>
<div></div>

</body>
</html>
