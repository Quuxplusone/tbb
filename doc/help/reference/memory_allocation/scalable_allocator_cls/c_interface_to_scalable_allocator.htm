
<!DOCTYPE html
  PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!-- saved from url=(0014)about:internet -->
<html xmlns:MSHelp="http://www.microsoft.com/MSHelp/" lang="en-us" xml:lang="en-us"><head>
      <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
   
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="DC.Type" content="reference">
<meta name="DC.Title" content="C Interface to Scalable Allocator">
<meta name="DC.subject" content="C Interface to Scalable Allocator">
<meta name="keywords" content="C Interface to Scalable Allocator">
<meta name="DC.Relation" scheme="URI" content="../../../reference/memory_allocation/scalable_allocator_cls.htm">
<meta name="DC.Format" content="XHTML">
<meta name="DC.Identifier" content="c_interface_to_scalable_allocator">
<meta name="DC.Language" content="en-US">
<link rel="stylesheet" type="text/css" href="../../../intel_css_styles.css">
<title>C Interface to Scalable Allocator</title>
</head>
<body id="c_interface_to_scalable_allocator">
 <!-- ==============(Start:NavScript)================= -->
 <script src="../../../NavScript.js" language="JavaScript1.2" type="text/javascript"></script>
 <script language="JavaScript1.2" type="text/javascript">WriteNavLink(3);</script>
 <!-- ==============(End:NavScript)================= -->
<a name="c_interface_to_scalable_allocator"><!-- --></a>


    <h1 class="topictitle1">C Interface to Scalable Allocator</h1>

<div>
        <div class="section"><h2 class="sectiontitle">Summary</h2>
            
            <p>Low level interface for scalable memory allocation.</p>

        </div>

        <div class="section"><h2 class="sectiontitle">Syntax</h2>
            
            <pre>        extern "C" {
            // Scalable analogs of C memory allocator
            void* scalable_malloc( size_t size );
            void  scalable_free( void* ptr );
            void* scalable_calloc( size_t nobj, size_t size );
            void* scalable_realloc( void* ptr, size_t size );
         
            // Analog of _msize/malloc_size/malloc_usable_size.
            size_t scalable_msize( void* ptr );
         
            // Scalable analog of posix_memalign
            int scalable_posix_memalign( void** memptr, size_t alignment, 
                                         size_t size );
         
            // Aligned allocation
            void* scalable_aligned_malloc( size_t size, 
                                           size_t alignment);
            void scalable_aligned_free( void* ptr ); 
            void* scalable_aligned_realloc( void* ptr, size_t size, 
                                            size_t alignment );
        }</pre>
        </div>

        <div class="section"><h2 class="sectiontitle">Header</h2>
            
            <pre>#include "tbb/scalable_allocator.h"</pre>
        </div>

        <div class="section"><h2 class="sectiontitle">Description</h2>
            
            <p>These functions provide a C level interface to the scalable
                allocator. Each routine scalable_<samp class="codeph"><em>x</em></samp> behaves analogously to
                library function <samp class="codeph"><em>x</em></samp>. The routines form the two families shown
                in the table below, "C Interface to Scalable Allocator" . Storage allocated by a
                        scalable_<samp class="codeph"><em>x</em></samp> function in one family must be freed or
                resized by a scalable_<samp class="codeph"><em>x</em></samp> function in the same family, not by
                a C standard library function. Likewise storage allocated by a C standard library
                function should not be freed or resized by a scalable_<samp class="codeph"><em>x</em></samp>
                function.</p>

            
<div class="tablenoborder"><a name="tbl23"><!-- --></a><table cellpadding="4" summary="" id="tbl23" width="100%" frame="border" border="1" cellspacing="0" rules="all"><caption><span class="tablecap">C Interface to Scalable Allocator</span></caption>
                    
                    
                    
                    
                    <thead align="left">
                        <tr>
                            <th class="cellrowborder" valign="top" width="10.256410256410255%" id="d6507e89">
                                <p>Family</p>

                            </th>

                            <th class="cellrowborder" valign="top" width="30.76923076923077%" id="d6507e95">
                                <p>Allocation Routine</p>

                            </th>

                            <th class="cellrowborder" valign="top" width="33.94871794871795%" id="d6507e101">
                                <p>Deallocation Routine </p>

                            </th>

                            <th class="cellrowborder" valign="top" width="25.025641025641026%" id="d6507e107">
                                <p>Analogous Library</p>

                            </th>

                        </tr>

                    </thead>

                    <tbody>
                        <tr>
                            <td class="cellrowborder" rowspan="4" valign="top" width="10.256410256410255%" headers="d6507e89 ">
                                <p>1</p>

                            </td>

                            <td class="cellrowborder" valign="top" width="30.76923076923077%" headers="d6507e95 ">
                                <p>scalable_malloc</p>

                            </td>

                            <td class="cellrowborder" rowspan="4" valign="top" width="33.94871794871795%" headers="d6507e101 ">
                                <p>scalable_free</p>

                            </td>

                            <td class="cellrowborder" rowspan="3" valign="top" width="25.025641025641026%" headers="d6507e107 ">
                                <p>C standard library</p>

                            </td>

                        </tr>

                        <tr>
                            <td class="cellrowborder" valign="top" width="30.76923076923077%" headers="d6507e95 ">
                                <p>scalable_calloc</p>

                            </td>

                        </tr>

                        <tr>
                            <td class="cellrowborder" valign="top" width="30.76923076923077%" headers="d6507e95 ">
                                <p>scalable_realloc</p>

                            </td>

                        </tr>

                        <tr>
                            <td class="cellrowborder" valign="top" width="30.76923076923077%" headers="d6507e95 ">
                                <p>scalable_posix_memalign</p>

                            </td>

                            <td class="cellrowborder" valign="top" width="30.76923076923077%" headers="d6507e95 ">
                                <p>POSIX*</p>

                            </td>

                        </tr>

                        <tr>
                            <td class="cellrowborder" rowspan="3" valign="top" width="10.256410256410255%" headers="d6507e89 ">
                                <p>2</p>

                            </td>

                            <td class="cellrowborder" valign="top" width="30.76923076923077%" headers="d6507e95 ">
                                <p>scalable_aligned_malloc</p>

                            </td>

                            <td class="cellrowborder" rowspan="3" valign="top" width="33.94871794871795%" headers="d6507e101 ">
                                <p>scalable_aligned_free</p>

                            </td>

                            <td class="cellrowborder" rowspan="3" valign="top" width="25.025641025641026%" headers="d6507e107 ">
                                <p>Microsoft* C run-time library</p>

                            </td>

                        </tr>

                        <tr>
                            <td class="cellrowborder" valign="top" width="30.76923076923077%" headers="d6507e95 ">
                                <p>scalable_aligned_free</p>

                            </td>

                        </tr>

                        <tr>
                            <td class="cellrowborder" valign="top" width="30.76923076923077%" headers="d6507e95 ">
                                <p>scalable_aligned_realloc</p>

                            </td>

                        </tr>

                    </tbody>

                </table>
</div>

        </div>

        <div class="section"><h2 class="sectiontitle"> size_t scalable_msize( void* ptr )</h2>
            
            <p><strong>Returns</strong></p>

            <p>The usable size of the memory block pointed to by <em>ptr</em> if it
                was allocated by the scalable allocator. Returns zero if <em>ptr</em> does not point
                to such a block.</p>

        </div>

    </div>
 
<div class="familylinks">
<div class="parentlink"><strong>Parent topic:</strong> <a href="../../../reference/memory_allocation/scalable_allocator_cls.htm">scalable_allocator Template Class</a></div>
</div>
<div></div>

</body>
</html>
