# Copyright 2005-2007 Intel Corporation.  All Rights Reserved.
#
# This file is part of Threading Building Blocks.
#
# Threading Building Blocks is free software; you can redistribute it
# and/or modify it under the terms of the GNU General Public License
# version 2 as published by the Free Software Foundation.
#
# Threading Building Blocks is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty
# of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Threading Building Blocks; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#
# As a special exception, you may use this file as part of a free software
# library without restriction.  Specifically, if other files instantiate
# templates or use macros or inline functions from this file, or you compile
# this file and link it with other files to produce an executable, this
# file does not by itself cause the resulting executable to be covered by
# the GNU General Public License.  This exception does not however
# invalidate any other reasons why the executable file might be covered by
# the GNU General Public License.

# cache_aligned_allocator.cpp
__ZN3tbb8internal12NFS_AllocateEmmPv
__ZN3tbb8internal15NFS_GetLineSizeEv
__ZN3tbb8internal8NFS_FreeEPv

# Task.cpp
__ZN3tbb19task_scheduler_init10initializeEi
__ZN3tbb19task_scheduler_init9terminateEv
__ZN3tbb4task22internal_set_ref_countEi
__ZN3tbb4task22spawn_and_wait_for_allERNS_9task_listE
__ZN3tbb4task4selfEv
__ZN3tbb4task7destroyERS0_
__ZN3tbb8internal19allocate_root_proxy4freeERNS_4taskE
__ZN3tbb8internal19allocate_root_proxy8allocateEm
__ZNK3tbb8internal20allocate_child_proxy4freeERNS_4taskE
__ZNK3tbb8internal20allocate_child_proxy8allocateEm
__ZNK3tbb8internal27allocate_continuation_proxy4freeERNS_4taskE
__ZNK3tbb8internal27allocate_continuation_proxy8allocateEm
__ZNK3tbb8internal34allocate_additional_child_of_proxy4freeERNS_4taskE
__ZNK3tbb8internal34allocate_additional_child_of_proxy8allocateEm

# tbb_misc.cpp
__ZN3tbb17assertion_failureEPKciS1_S1_
__ZN3tbb8internal36get_initial_auto_partitioner_divisorEv
__ZN3tbb8internal13handle_perrorEiPKc

# Pipeline.cpp
__ZTIN3tbb6filterE
__ZTVN3tbb6filterE
__ZN3tbb6filterD2Ev
__ZN3tbb8pipeline10add_filterERNS_6filterE
__ZN3tbb8pipeline12inject_tokenERNS_4taskE
__ZN3tbb8pipeline3runEm
__ZN3tbb8pipeline5clearEv
__ZN3tbb8pipelineC1Ev
__ZN3tbb8pipelineD1Ev

# ReaderWriterMutex.cpp
__ZN3tbb16queuing_rw_mutex11scoped_lock17upgrade_to_writerEv
__ZN3tbb16queuing_rw_mutex11scoped_lock19downgrade_to_readerEv
__ZN3tbb16queuing_rw_mutex11scoped_lock7acquireERS0_b
__ZN3tbb16queuing_rw_mutex11scoped_lock7releaseEv
__ZN3tbb16queuing_rw_mutex11scoped_lock11try_acquireERS0_b

# spin_rw_mutex.cpp
__ZN3tbb13spin_rw_mutex16internal_upgradeEPS0_
__ZN3tbb13spin_rw_mutex22internal_itt_releasingEPS0_
__ZN3tbb13spin_rw_mutex23internal_acquire_readerEPS0_
__ZN3tbb13spin_rw_mutex23internal_acquire_writerEPS0_
__ZN3tbb13spin_rw_mutex18internal_downgradeEPS0_
__ZN3tbb13spin_rw_mutex23internal_release_readerEPS0_
__ZN3tbb13spin_rw_mutex23internal_release_writerEPS0_
__ZN3tbb13spin_rw_mutex27internal_try_acquire_readerEPS0_
__ZN3tbb13spin_rw_mutex27internal_try_acquire_writerEPS0_

# SpinMutex.cpp
__ZN3tbb10spin_mutex11scoped_lock16internal_acquireERS0_
__ZN3tbb10spin_mutex11scoped_lock16internal_releaseEv
__ZN3tbb10spin_mutex11scoped_lock20internal_try_acquireERS0_

# mutex.cpp
__ZN3tbb5mutex11scoped_lock16internal_acquireERS0_
__ZN3tbb5mutex11scoped_lock16internal_releaseEv
__ZN3tbb5mutex11scoped_lock20internal_try_acquireERS0_
__ZN3tbb5mutex16internal_destroyEv
__ZN3tbb5mutex18internal_constructEv

# QueuingMutex.cpp
__ZN3tbb13queuing_mutex11scoped_lock7acquireERS0_
__ZN3tbb13queuing_mutex11scoped_lock7releaseEv
__ZN3tbb13queuing_mutex11scoped_lock11try_acquireERS0_

# concurrent_hash_map
__ZNK3tbb8internal21hash_map_segment_base23internal_grow_predicateEv

# ConcurrentQueue.cpp
__ZN3tbb8internal21concurrent_queue_base12internal_popEPv
__ZN3tbb8internal21concurrent_queue_base13internal_pushEPKv
__ZN3tbb8internal21concurrent_queue_base21internal_set_capacityElm
__ZN3tbb8internal21concurrent_queue_base23internal_pop_if_presentEPv
__ZN3tbb8internal21concurrent_queue_base25internal_push_if_not_fullEPKv
__ZN3tbb8internal21concurrent_queue_baseC2Em
__ZN3tbb8internal21concurrent_queue_baseD2Ev
__ZTIN3tbb8internal21concurrent_queue_baseE
__ZN3tbb8internal30concurrent_queue_iterator_base6assignERKS1_
__ZN3tbb8internal30concurrent_queue_iterator_base7advanceEv
__ZN3tbb8internal30concurrent_queue_iterator_baseC2ERKNS0_21concurrent_queue_baseE
__ZN3tbb8internal30concurrent_queue_iterator_baseD2Ev
__ZNK3tbb8internal21concurrent_queue_base13internal_sizeEv

# ConcurrentVector.cpp
__ZN3tbb8internal22concurrent_vector_base13internal_copyERKS1_mPFvPvPKvmE
__ZN3tbb8internal22concurrent_vector_base14internal_clearEPFvPvmE
__ZN3tbb8internal22concurrent_vector_base15internal_assignERKS1_mPFvPvmEPFvS4_PKvmESA_
__ZN3tbb8internal22concurrent_vector_base16internal_grow_byEmmPFvPvmE
__ZN3tbb8internal22concurrent_vector_base16internal_reserveEmmm
__ZN3tbb8internal22concurrent_vector_base18internal_push_backEmRm
__ZN3tbb8internal22concurrent_vector_base25internal_grow_to_at_leastEmmPFvPvmE
__ZNK3tbb8internal22concurrent_vector_base17internal_capacityEv
__ZN3tbb8internal22concurrent_vector_baseD2Ev
